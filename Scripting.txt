when we call a script we can keep arguments like:
	ipsweep.sh <192.168.1>
		here the 192.168.1 is the 1st argument and in the script its
		accessed by $1.

For Loop:
	for <variable_name> in `seq 1 254`; do
	<doing something>&
	done
		it will loop from 1 to 254, <variable_name> variable can be 
		accessed using $<variable_name>. Here using & threads the
		task and and each cpu thread will do its own share.
if else:
	if [ <test case> ]
	then
	<do this>
	else
	<do this then>
	fi

	example: 
	if [ "$1"== "" ]
	 then
	echo "wrong syntax."
	else
	echo "correct syntax."
	fi
if in script want to use command use $(<command>).

variable_name = "String is the variable here."
echo "$variable_name"

read variable_name 
        similar to cin>>variable_name
        
$RANDOM --> random number generation
$SHELL --> which shell are you using
$RWD --> present working directory
$HOSTNAME --> hostname eg. LenovoIdeapadGaming3 

in the terminal we can declare our own system variable
in terminal:
    >>$variable_name="string"
    >>variable_name
        >>string
can NOT use them in scripts as scripts are child processes
    use this to make available to all child processes:
        export variable_name
            this will not work when loged out and in

write 
    export variable_name="string"
        in .bashrc file, this will make it permanent,logout and in.

# is used for commenting just like in py

|| or, && and are the operators used in bash like in C++.

conditional like that of switch, we have case:

Syntax:

case $<variable_name> in 
    1)
        <do something>
        ;;
    
    2)
        <do something again>
        ;;
esac
